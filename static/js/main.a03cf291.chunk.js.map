{"version":3,"sources":["components/Movie/default poster.jpg","components/Header/Header.js","components/SearchField/SearchField.js","components/Spinner/Spinner.js","components/Movie/Movie.js","components/Info/Info.js","components/MovieList/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","titleApp","onCloseInfo","className","onClick","SearchField","search","useState","searchValue","setSearchField","value","onChange","event","target","type","placeholder","preventDefault","Spinner","Movie","movie","clickOnMovie","poster","Poster","default_poster","isImgLoaded","setImgStatus","useEffect","img","Image","onload","onerror","error","console","log","src","Title","style","width","alt","Year","Info","info","activateInfo","undefined","diplay","justifyContent","Released","Runtime","Genre","Plot","Director","Writer","Actors","BoxOffice","Awards","Country","MovieList","movies","Fragment","map","i","key","imdbID","DEFAULT_API_REQUEST","initialState","loading","errorMessage","searchMoviesRequest","searchMoviesSucces","data","Search","getInfo","setInfoActivated","status","reducer","state","action","App","useReducer","dispatch","fetch","then","response","json","MovieCLickedStatus","Response","Error","searchMoivesFailure","marginTop","arg","ID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a03cf291.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default poster.731567aa.jpg\";","import React from 'react' \r\nimport './header.css'\r\n\r\nfunction Header({ titleApp = 'Movie/Game Search App', onCloseInfo }) {\r\n\treturn (\r\n\t\t<header className=\"header\" onClick={onCloseInfo}>\r\n\t\t\t{/*<img src={projector} alt=\"popcorn_img\" style={{width: '6rem'}} />*/}\r\n\t\t\t<h1>{titleApp}</h1>\r\n\t\t\t{/*<div style={{width: '6rem'}}></div>*/}\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header","import React, {useState} from 'react'\r\nimport './searchfield.css' \r\n\r\nfunction SearchField({ search, onCloseInfo }) {\r\n\t\r\n\tconst [searchValue, setSearchField] = useState(\"\")\r\n\r\n\tconst handleSearchInputChanges = (event) => {\r\n\t\tsetSearchField(event.target.value)\r\n\t}\r\n\r\n\tconst resetSearchField = () => {\r\n\t\tsetSearchField(\"\")\r\n\t}\r\n\r\n\tconst callSearchFunction = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tsearch(searchValue);\r\n\t\tresetSearchField();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div onClick={onCloseInfo}>\r\n\t\t\t<form className=\"search\">\r\n        \t\t<input\r\n          \t\t\tvalue={searchValue}\r\n          \t\t\tonChange={handleSearchInputChanges}\r\n          \t\t\ttype=\"text\"\r\n          \t\t\tplaceholder=\"Enter a movie or game title...\"\r\n        \t\t/>\r\n        \t\t<button onClick={callSearchFunction} type=\"submit\" value=\"search\">SEARCH</button>\r\n      \t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchField","import React from 'react'\r\nimport './spinner.css'\r\n\r\nfunction Spinner() {\r\n\treturn (\r\n\t\t<div className=\"cssload-container\">\r\n\t\t\t<div className=\"cssload-whirlpool\"></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Spinner ","import React, { useState, useEffect } from 'react' \r\nimport default_poster from './default poster.jpg'\r\nimport './movie.css'\r\nimport Spinner from '../Spinner/Spinner'\r\n \r\nfunction Movie({ movie, clickOnMovie}) {\r\n\t\r\n\tconst poster = (movie.Poster === 'N/A') ? default_poster : movie.Poster\r\n  \r\n  const [isImgLoaded, setImgStatus] = useState(false)\r\n\r\n  useEffect(() => {      \r\n    setImgStatus(false)\r\n\r\n    const img = new Image()\r\n    img.onload = () => {\r\n      setImgStatus(true)\r\n    }\r\n    img.onerror = (error) => {\r\n      console.log(error)\r\n    }\r\n    img.src = poster\r\n  }, [movie, poster]);\r\n\r\n  \treturn (\r\n\t\t<div className=\"movie\" onClick={() => clickOnMovie(movie)}>\r\n      {isImgLoaded ? <div>\r\n                        <h3>{movie.Title}</h3>\r\n      \t\t              <div className=\"divForImg\">\r\n                          <img style={{width: '100%'}}\r\n          \t\t\t                       alt={`The movie titled: ${movie.Title}`}\r\n          \t\t\t                       src={poster}/> \r\n                        </div>\r\n      \t\t              <p>({movie.Year})</p>\r\n                    </div>\r\n      : <Spinner/>}\r\n    </div>\r\n\t);\r\n}\r\n\r\nexport default Movie\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport './info.css'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nfunction Info({ info, activateInfo, onCloseInfo}) {\r\n\t// console.log(info)\r\n\tif (activateInfo === true) \r\n\t{\r\n\t\tif (info.Title === undefined)\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"info\" style={{diplay: 'flex', justifyContent:'center'}}>\r\n\t\t\t\t\t<Spinner/>\r\n\t\t\t\t</div>\t\r\n\t\t\t)\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t<div className=\"info\" onClick={onCloseInfo}>\r\n\t\t\t\t<div className=\"poster\">\r\n\t\t\t\t\t<img src={info.Poster} alt=\"poster\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text\">\r\n\t\t\t\t\t<p><span className=\"x\">Title:</span> {info.Title}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Year:</span> {info.Year}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Released:</span> {info.Released}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Runtime:</span> {info.Runtime}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Genre:</span> {info.Genre}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Plot:</span> {info.Plot}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Director:</span> {info.Director}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Writer:</span> {info.Writer}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Actors:</span> {info.Actors}</p>\r\n\t\t\t\t\t<p><span className=\"x\">BoxOffice:</span> {info.BoxOffice}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Awards:</span> {info.Awards}</p>\r\n\t\t\t\t\t<p><span className=\"x\">Country:</span> {info.Country}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\treturn null\r\n}\r\n\r\nexport default Info","import React from 'react' \r\nimport Movie from '../Movie/Movie'\r\nimport Info from '../Info/Info'\r\nimport './movieList.css'\r\n\r\nfunction MovieList({ movies, clickOnMovie, info, activateInfo, onCloseInfo}) {\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"movieList\" onClick={onCloseInfo}>\r\n\t\t\t\t{movies.map((movie, i) => (<Movie clickOnMovie={clickOnMovie}\r\n\t\t\t\t\t\t\t\t\t\t\t\t  movie={movie} \r\n\t\t\t\t\t\t\t\t\t\t\t\t  key={`${i}&${movie.imdbID}&${movie.Title}`} />))}\r\n\t\t\t</div>\r\n\t\t\t\t<Info activateInfo={activateInfo} info={info} onCloseInfo={onCloseInfo}/>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default MovieList","import React, { useEffect, useReducer } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport SearchField from './components/SearchField/SearchField'\nimport MovieList from './components/MovieList/MovieList'\nimport Spinner from './components/Spinner/Spinner'\n\n\nconst API_KEY = \"f6170df7\";\nconst DEFAULT_API_REQUEST = `https://www.omdbapi.com/?s=man&apikey=${API_KEY}`\n\nconst initialState = {\n  loading: false,\n  movies: [],\n  errorMessage: null,\n  info: {},\n  activateInfo: false,\n}\n\n\nconst searchMoviesRequest = () => ({\n  type: \"SEARCH_MOVIES_REQUEST\"\n})\n\nconst searchMoviesSucces = (data) => ({\n  type: \"SEARCH_MOVIES_SUCCESS\",\n  movies: data.Search\n})\n\nconst searchMoivesFailure = (data) => ({\n  type: \"SEARCH_MOVIES_FAILURE\",\n  error: data.Error\n})\n\nconst getInfo = (info) => ({\n  type: \"GET_INFORMATION\",\n  info\n})\n\nconst setInfoActivated = (status) => ({\n  type: \"ACTIVATE_INFO_FIELD\",\n  status\n})\n\nconst resetInfo = () => ({\n  type: \"RESET_INFORMATION\"\n})\n\nconst reducer = (state, action) => {\n  console.log(action)\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        movies: action.movies\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    case \"GET_INFORMATION\":\n      return {\n        ...state,\n        info: action.info\n      }\n    case \"ACTIVATE_INFO_FIELD\":\n      return {\n        ...state,\n        activateInfo: action.status\n      }\n    case \"RESET_INFORMATION\":\n      return {\n        ...state,\n        info: {}\n      }\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  \n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch(searchMoviesRequest())\n    fetch(DEFAULT_API_REQUEST)\n    .then(response => response.json())\n    .then(data => dispatch(searchMoviesSucces(data)))\n  }, []);\n\n  const search = (searchValue) => {\n\n    dispatch(searchMoviesRequest)\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=${API_KEY}`)\n    .then(response => response.json())\n    .then(data => {\n      if (data.Response === \"True\") \n      {\n        dispatch(searchMoviesSucces(data))\n      } \n      else \n      {\n        dispatch(searchMoivesFailure(data))\n      }\n    });\n  }\n\n  \n  let MovieCLickedStatus = false;\n  const clickOnMovie = (...arg) => {\n    // console.log(MovieCLickedStatus)\n    MovieCLickedStatus = true\n    // console.log(MovieCLickedStatus)\n    const ID = arg[0].imdbID\n    \n    if(activateInfo === false)\n    {\n          dispatch(setInfoActivated(true))\n    }\n\n    fetch(`https://www.omdbapi.com/?i=${ID}&apikey=${API_KEY}`)\n    .then(response => response.json())\n    .then(response => dispatch(getInfo(response)))\n  }\n\n  const onCloseInfo = () => {\n    // console.log(MovieCLickedStatus)   \n    if (!MovieCLickedStatus && activateInfo === true)\n    {\n        dispatch(setInfoActivated(false))\n    }\n    dispatch(resetInfo())   \n  }\n\n  const { movies, errorMessage, loading, info, activateInfo} = state;\n\n  return (\n    <div className=\"App\">\n\n        <Header onCloseInfo={onCloseInfo} />\n        <SearchField search={search} onCloseInfo={onCloseInfo} />\n        {(loading) ? \n        <div style={{marginTop: '50px'}}>\n          <Spinner/> \n        </div> \n        :\n        ( errorMessage ? <h1 style={{marginTop: '50px'}}>Not Found</h1> \n        : \n        <MovieList onCloseInfo={onCloseInfo} \n                   info={info} \n                   activateInfo={activateInfo} \n                   movies={movies} \n                   clickOnMovie={clickOnMovie}/> )}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}